diff --git a/node_modules/glint-environment-ember-template-imports/-private/environment/transform.js b/node_modules/glint-environment-ember-template-imports/-private/environment/transform.js
index ba16d66..80e59b5 100644
--- a/node_modules/glint-environment-ember-template-imports/-private/environment/transform.js
+++ b/node_modules/glint-environment-ember-template-imports/-private/environment/transform.js
@@ -25,13 +25,27 @@ const transform = (data, { ts, context, setEmitMetadata }) => {
         else if (isETITemplateExpression(ts, node)) {
             // Convert '[__T`foo`]' as an expression to just '__T`foo`'
             let location = findTemplateLocation(templateLocations, node);
-            return buildNodeForTemplate(f, node.elements[0], location);
+            let template = buildNodeForTemplate(f, node.elements[0], location);
+            setEmitMetadata(template, {
+                templateLocation: {
+                    start: location.startTagOffset,
+                    end: location.endTagOffset + location.endTagLength,
+                },
+            });
+            return template;
         }
         else if (isETITemplateProperty(ts, node)) {
             // Convert '[__T`foo`]' in a class body to 'static { __T`foo` }'
             let location = findTemplateLocation(templateLocations, node);
             let template = buildNodeForTemplate(f, node.name.expression, location);
-            setEmitMetadata(template, { prepend: 'static { ', append: ' }' });
+            setEmitMetadata(template, {
+                prepend: 'static { ',
+                append: ' }',
+                templateLocation: {
+                    start: location.startTagOffset,
+                    end: location.endTagOffset + location.endTagLength,
+                },
+            });
             return buildStaticBlockForTemplate(f, template);
         }
         return node;
@@ -95,9 +109,5 @@ function buildNodeForTemplate(f, node, location) {
     let { startTagLength, endTagLength } = location;
     let prefix = ''.padStart(startTagLength - common_1.GLOBAL_TAG.length - '`'.length);
     let suffix = ''.padStart(endTagLength - '`'.length);
-    let template = f.createTaggedTemplateExpression(node.tag, node.typeArguments, f.createNoSubstitutionTemplateLiteral(`${prefix}${text}${suffix}`, typeof rawText === 'string' ? `${prefix}${rawText}${suffix}` : undefined));
-    return Object.assign(template, {
-        pos: location.startTagOffset,
-        end: location.endTagOffset + location.endTagLength,
-    });
+    return f.createTaggedTemplateExpression(node.tag, node.typeArguments, f.createNoSubstitutionTemplateLiteral(`${prefix}${text}${suffix}`, typeof rawText === 'string' ? `${prefix}${rawText}${suffix}` : undefined));
 }
