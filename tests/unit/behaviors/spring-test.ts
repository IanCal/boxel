import { module, test } from 'qunit';
import SpringBehavior from 'animations/behaviors/spring';

module('Unit | Behaviors | Spring', function () {
  test('generates minimum of 2 frames', function (assert) {
    let spring = new SpringBehavior({
      overshootClamping: true,
      stiffness: 1000000,
    });

    assert.deepEqual(spring.toFrames(0, 1, 0, 0), [0, 1]);
    assert.deepEqual(spring.toFrames(1, 0, 0, 0), [1, 0]);
  });

  test('overshootClamping prevents the spring from exceeding its target value', function (assert) {
    let unclampedSpring = new SpringBehavior({
      overshootClamping: false,
      damping: 100,
      stiffness: 100000,
    });
    assert.deepEqual(unclampedSpring.toFrames(0, 1, 0, 0), [
      0,
      0.8561306451232562,
      1.129827626527687,
      1.0804582724019351,
      1.0085010368734653,
      0.9882924567744584,
      0.9935892608552294,
      1,
    ]);

    let clampedSpring = new SpringBehavior({
      overshootClamping: true,
      damping: 100,
      stiffness: 100000,
    });

    assert.deepEqual(clampedSpring.toFrames(0, 1, 0, 0), [
      0,
      0.8561306451232562,
      1,
    ]);
  });

  test('underdamped spring', function (assert) {
    let underdampedSpring = new SpringBehavior({
      stiffness: 100,
      damping: 10,
      mass: 1,
    });
    assert.deepEqual(underdampedSpring.toFrames(0, 1, 0, 0), [
      0,
      0.01311832586992645,
      0.04941510804510185,
      0.10440547345507933,
      0.1738158635405722,
      0.2536606857419862,
      0.3402998466082985,
      0.430478632885834,
      0.5213516324407461,
      0.6104925345574281,
      0.695891727212196,
      0.7759436260445078,
      0.8494256348541123,
      0.9154705594181388,
      0.973534183862093,
      1.0233595799066921,
      1.0649395616400008,
      1.0984785289364258,
      1.1243547674084118,
      1.1430840971826612,
      1.15528559137785,
      1.1616499216592626,
      1.162910735616452,
      1.1598193311800509,
      1.1531227684140493,
      1.1435454497289794,
      1.1317741062562134,
      1.1184460507317273,
      1.10414049529181,
      1.089372685293384,
      1.074590566595033,
      1.0601736824413142,
      1.0464339858249985,
      1.0336182525290103,
      1.0219117875161923,
      1.0114431315004955,
      1.0022894940077183,
      0.9944826627053691,
      0.9880151650367869,
      0.9828464861367362,
      0.9789091756620557,
      0.9761147047004372,
      0.9743589616142305,
      0.9735273019556582,
      0.9734990920012613,
      0.9741517076604145,
      0.9753639702868705,
      0.9770190181322469,
      0.9790066267804659,
      0.9812250039203692,
      0.9835820933396238,
      0.9859964301960646,
      0.9883975946208738,
      0.9907263137377673,
      0.9929342634684901,
      0.9949836212722638,
      0.9968464194727022,
      0.9985037462934381,
      1,
    ]);
  });

  test('critically damped spring', function (assert) {
    let criticallydampedSpring = new SpringBehavior({
      stiffness: 100,
      damping: 20,
      mass: 1,
    });
    assert.deepEqual(criticallydampedSpring.toFrames(0, 1, 0, 0), [
      0,
      0.012437987627616942,
      0.04462491923494771,
      0.09020401043104986,
      0.1443048016123466,
      0.2032366177370234,
      0.26424111765711555,
      0.32529301485170514,
      0.38494001106330433,
      0.44217459962892547,
      0.49633172576650164,
      0.547007386107534,
      0.5939941502901618,
      0.6372303273564889,
      0.6767601071186498,
      0.7127025048163542,
      0.7452273455163944,
      0.7745368587040187,
      0.8008517265285442,
      0.8244006520446817,
      0.8454126954952397,
      0.8641117745995668,
      0.8807128450362989,
      0.8954193748557835,
      0.9084218055563291,
      0.9198967564051186,
      0.9300067800696483,
      0.9389005190396674,
      0.9467131455415272,
      0.9535669942158791,
      0.9595723180054873,
      0.9648281145122878,
      0.969422983372401,
      0.9734359856499836,
      0.9769374844235683,
      0.9799899520854091,
      0.9826487347633355,
      0.9849627680037535,
      0.9869752406646145,
      0.9887242060526682,
      0.9902431408563948,
      0.9915614535000543,
      0.9927049442755639,
      0.9936962200773563,
      0.9945550668344385,
      0.9952987828537434,
      0.9959424762990092,
      0.9964993299607008,
      0.9969808363488774,
      0.9973970059808868,
      0.9977565515534178,
      0.9980670504943989,
      0.9983350881923788,
      0.9985663840051094,
      0.9987659019591332,
      0.9989379478710443,
      1,
    ]);
  });

  test('overdamped spring', function (assert) {
    let overdampedSpring = new SpringBehavior({
      stiffness: 100,
      damping: 25,
      mass: 1,
      allowsOverdamping: true,
    });
    assert.deepEqual(overdampedSpring.toFrames(0, 1, 0, 0), [
      0,
      0.012117884018832292,
      0.04249673982337865,
      0.08422543629527413,
      0.13249063194019006,
      0.18397102734526227,
      0.23640421479535967,
      0.2882771282614057,
      0.33860499169747793,
      0.38677361913460173,
      0.43242705310631335,
      0.47538763860903943,
      0.5155992914009884,
      0.5530873427699907,
      0.5879302222977014,
      0.6202395865194417,
      0.6501464658436414,
      0.6777916929312899,
      0.7033193705276489,
      0.7268724910753659,
      0.7485900741503642,
      0.7686053693879248,
      0.7870448025536975,
      0.8040274354132486,
      0.8196647765604841,
      0.834060827899976,
      0.8473122854284034,
      0.8595088371855433,
      0.8707335185103466,
      0.8810630970230116,
      0.8905684684780559,
      0.8993150508120259,
      0.9073631680699791,
      0.9147684189579867,
      0.921582026907279,
      0.9278511700159389,
      0.9336192902469659,
      0.9389263819433481,
      0.9438092601688999,
      0.9483018096675063,
      0.9524352154025942,
      0.9562381757283864,
      0.959737099279815,
      0.9629562866666219,
      0.9659180980316832,
      0.9686431074927613,
      0.9711502454368727,
      0.9734569295815177,
      0.9755791856600793,
      0.9775317585317287,
      0.9793282144604826,
      0.98098103525446,
      0.9825017049053953,
      0.9839007893203391,
      0.9851880096923368,
      0.986372310014724,
      0.9874619192044505,
      0.988464408263438,
      0.989386742873251,
      0.9902353317871699,
      0.9910160713549372,
      0.9917343864888577,
      0.9923952683554006,
      0.9930033090538435,
      0.9935627335226628,
      0.9940774288951881,
      0.9945509715083635,
      0.9949866517521907,
      0.9953874969324523,
      0.9957562923055266,
      0.996095600431419,
      0.9964077789794578,
      0.996694997110362,
      0.9969592505484938,
      0.9972023754490196,
      0.9974260611563257,
      0.9976318619423379,
      0.9978212078063018,
      0.9979954144110663,
      0.9981556922249085,
      0.9983031549324213,
      0.998438827172905,
      0.9985636516600326,
      0.9986784957322595,
      0.9987841573794911,
      0.9988813707878856,
      0.9989708114413194,
      1,
    ]);

    let overdampedSpringWithoutOverdamping = new SpringBehavior({
      stiffness: 100,
      damping: 25,
      mass: 1,
      allowsOverdamping: false,
    });
    assert.deepEqual(overdampedSpringWithoutOverdamping.toFrames(0, 1, 0, 0), [
      0,
      0.012437987627616942,
      0.04462491923494771,
      0.09020401043104986,
      0.1443048016123466,
      0.2032366177370234,
      0.26424111765711555,
      0.32529301485170514,
      0.38494001106330433,
      0.44217459962892547,
      0.49633172576650164,
      0.547007386107534,
      0.5939941502901618,
      0.6372303273564889,
      0.6767601071186498,
      0.7127025048163542,
      0.7452273455163944,
      0.7745368587040187,
      0.8008517265285442,
      0.8244006520446817,
      0.8454126954952397,
      0.8641117745995668,
      0.8807128450362989,
      0.8954193748557835,
      0.9084218055563291,
      0.9198967564051186,
      0.9300067800696483,
      0.9389005190396674,
      0.9467131455415272,
      0.9535669942158791,
      0.9595723180054873,
      0.9648281145122878,
      0.969422983372401,
      0.9734359856499836,
      0.9769374844235683,
      0.9799899520854091,
      0.9826487347633355,
      0.9849627680037535,
      0.9869752406646145,
      0.9887242060526682,
      0.9902431408563948,
      0.9915614535000543,
      0.9927049442755639,
      0.9936962200773563,
      0.9945550668344385,
      0.9952987828537434,
      0.9959424762990092,
      0.9964993299607008,
      0.9969808363488774,
      0.9973970059808868,
      0.9977565515534178,
      0.9980670504943989,
      0.9983350881923788,
      0.9985663840051094,
      0.9987659019591332,
      0.9989379478710443,
      1,
    ]);

    let criticallydampedSpring = new SpringBehavior({
      stiffness: 100,
      damping: 20,
      mass: 1,
    });
    assert.deepEqual(
      overdampedSpringWithoutOverdamping.toFrames(0, 1, 0, 0),
      criticallydampedSpring.toFrames(0, 1, 0, 0)
    );
  });

  test('takes a delay into account', function (assert) {
    let clampedSpring = new SpringBehavior({
      overshootClamping: true,
    });
    let frames = clampedSpring.toFrames(0, 1, 0, 0, 50);

    assert.equal(frames.length, 19);
    assert.deepEqual(frames, [
      0,
      0,
      0,
      0,
      0.01311832586992645,
      0.04941510804510185,
      0.10440547345507933,
      0.1738158635405722,
      0.2536606857419862,
      0.3402998466082985,
      0.430478632885834,
      0.5213516324407461,
      0.6104925345574281,
      0.695891727212196,
      0.7759436260445078,
      0.8494256348541123,
      0.9154705594181388,
      0.973534183862093,
      1,
    ]);
  });

  test('takes previous velocity into account', function (assert) {
    let clampedSpring = new SpringBehavior({
      overshootClamping: true,
    });

    let frames = clampedSpring.toFrames(0, 1, 0, 0.01, 0);
    assert.equal(frames.length, 20);
    assert.deepEqual(frames, [
      0,
      -0.13969053113410435,
      -0.22884286642010165,
      -0.2729397300198275,
      -0.2777722892911385,
      -0.24924497063833218,
      -0.19320734850639454,
      -0.1153132427056609,
      -0.020906443946447695,
      0.0850681032222379,
      0.19812930099278847,
      0.31430307937801827,
      0.43014600518778046,
      0.5427517209067267,
      0.6497426850304286,
      0.7492496812009896,
      0.8398814969300373,
      0.9206870550754027,
      0.9911121233903707,
      1,
    ]);

    frames = clampedSpring.toFrames(0, 1, 0, -0.01, 0);
    assert.equal(frames.length, 9);
    assert.deepEqual(frames, [
      0,
      0.16592718287395725,
      0.32767308251030525,
      0.4817506769299862,
      0.6254040163722829,
      0.7565663421223043,
      0.8738070417229914,
      0.976270508477329,
      1,
    ]);

    frames = clampedSpring.toFrames(0, 1, 0, -1, 0);
    assert.equal(frames.length, 2);
    assert.deepEqual(frames, [0, 1]);
  });

  // TODO: I don't think passing a velocity together with a delay makes too much sense
  test('takes previous velocity and delay into account', function (assert) {
    let clampedSpring = new SpringBehavior({
      overshootClamping: true,
    });
    let frames = clampedSpring.toFrames(0.25, 1, 0, -0.01, 50);

    assert.equal(frames.length, 10);
    assert.deepEqual(frames, [
      0.25,
      0.25,
      0.25,
      0.25,
      0.4126476014064757,
      0.5653193054990298,
      0.7056493085662163,
      0.83195005048714,
      0.9431511706868079,
      1,
    ]);
  });
});
